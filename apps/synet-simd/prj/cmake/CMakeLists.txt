cmake_minimum_required(VERSION 2.8)
project(Simd)

option(SIMD_AVX512 "AVX-512 (AVX-512F, AVX-512CD, AVX-512VL, AVX-512DQ, AVX-512BW) enable" ON)
option(SIMD_AVX512VNNI "AVX-512-VNNI enable" ON)
option(SIMD_TEST "Test framework enable" ON)
option(SIMD_INFO "Print build information" ON)
option(SIMD_PERF "Internal performance statistic" OFF)
option(SIMD_SHARED "Build as SHARED library" OFF)
option(SIMD_GET_VERSION "Get Simd Library version" ON)
option(SIMD_SYNET "Synet optimizations enable" ON)
option(SIMD_INT8_DEBUG "Synet INT8 debug enable" OFF)
option(SIMD_HIDE "Hide internal functions of Simd Library" OFF)
set(MAX_ERRORS 5)

if((NOT DEFINED SIMD_ROOT) OR (SIMD_ROOT STREQUAL ""))
	set(SIMD_ROOT "${CMAKE_CURRENT_SOURCE_DIR}/../..")
endif()

if((NOT DEFINED CMAKE_BUILD_TYPE) OR (CMAKE_BUILD_TYPE STREQUAL ""))
    set(CMAKE_BUILD_TYPE "Release")
endif()

if(NOT ${SIMD_TARGET} STREQUAL "")
    set(CMAKE_SYSTEM_PROCESSOR ${SIMD_TARGET})
endif()

if(NOT SIMD_SYNET)
	add_definitions(-DSIMD_SYNET_DISABLE)
endif()	

if(SIMD_HIDE AND SIMD_TEST)
	message("Test framework requires access to internal functions! Parameter SIMD_HIDE is ignored!")
	set(SIMD_HIDE OFF)
endif()

if(SIMD_SHARED)
    set(SIMD_LIB_TYPE "SHARED")
else()
    set(SIMD_LIB_TYPE "STATIC")
endif()

if(NOT SIMD_TOOLCHAIN STREQUAL "")
    set(CMAKE_C_COMPILER ${SIMD_TOOLCHAIN})
    set(CMAKE_CXX_COMPILER ${SIMD_TOOLCHAIN})
    execute_process(COMMAND "${CMAKE_CXX_COMPILER}" -dumpversion OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION)
	string(REGEX REPLACE "\n$" "" CMAKE_CXX_COMPILER_VERSION "${CMAKE_CXX_COMPILER_VERSION}")
endif()

if(SIMD_INFO)
	message("Simd Library:")
	message("Build type: '${CMAKE_BUILD_TYPE}'")
	message("Target: ${CMAKE_SYSTEM_PROCESSOR}")
	message("Library type: ${SIMD_LIB_TYPE}")
	message("Toolchain: ${CMAKE_CXX_COMPILER}")
	message("Compiler ID: ${CMAKE_CXX_COMPILER_ID}")
	message("Compiler Version: ${CMAKE_CXX_COMPILER_VERSION}")
	message("Test framework: ${SIMD_TEST}")
	message("Performance statistic: ${SIMD_PERF}")
	message("Synet: ${SIMD_SYNET}")
	message("Debug INT8: ${SIMD_INT8_DEBUG}")
	message("Hide internal: ${SIMD_HIDE}")
	if(NOT ${SIMD_TEST_FLAGS} STREQUAL "")
		message("Test flags: ${SIMD_TEST_FLAGS}")
	endif()
endif()

if(NOT SIMD_SYNET)
	add_definitions(-DSIMD_SYNET_DISABLE)
endif()

if(NOT SIMD_INT8_DEBUG)
	add_definitions(-DSIMD_INT8_DEBUG_DISABLE)
endif()

if(SIMD_HIDE)
	add_definitions(-DSIMD_HIDE_INTERNAL)
endif()

if(SIMD_PERF)
	add_definitions(-DSIMD_PERFORMANCE_STATISTIC)
endif()

include_directories("${SIMD_ROOT}/src")

if(SIMD_GET_VERSION)
	if (WIN32 AND NOT (CYGWIN OR MSYS))
		string(REPLACE "/" "\\" SIMD_ROOT_WINDOWS ${SIMD_ROOT})
		execute_process(COMMAND "${SIMD_ROOT}/prj/cmd/GetVersion.cmd" "${SIMD_ROOT_WINDOWS}")
	else()
		execute_process(COMMAND bash "${SIMD_ROOT}/prj/sh/GetVersion.sh" "${SIMD_ROOT}")
	endif()
else()
	add_definitions(-DSIMD_VERSION="unknown")
endif()

string(REGEX REPLACE "(-march=[a-zA-Z0-9-]*)|(-mtune=[a-zA-Z0-9-]*)|(-msse[0-9,\\.]*)|(-mavx[0-9]*)|(-mfma)" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(COMMON_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -O3")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(COMMON_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -O0 -g")
else()
    message(FATAL_ERROR "Unknown value of CMAKE_BUILD_TYPE!")
endif()

if((CMAKE_CXX_COMPILER MATCHES "clang") OR (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
  set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -ferror-limit=${MAX_ERRORS}")
else()
  set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -fmax-errors=${MAX_ERRORS}")
endif()

if(SIMD_HIDE)
  set(COMMON_CXX_FLAGS "${COMMON_CXX_FLAGS} -fvisibility=hidden")
endif()

if((CMAKE_SYSTEM_PROCESSOR STREQUAL "i686") OR (CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64"))
	include(x86.cmake)
elseif((CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc") OR (CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64"))
	include(ppc.cmake)
elseif((CMAKE_SYSTEM_PROCESSOR MATCHES "arm") OR (CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64"))
	include(arm.cmake)
else()
    message(FATAL_ERROR "Unknown value of CMAKE_SYSTEM_PROCESSOR!")
endif()
