/*!
    \mainpage %Simd Library Overview

    \section s0 Introduction

    The <b>%Simd Library</b> is a free open source image processing library and machine learning, designed for C and C++ programmers.
    It provides many useful high performance algorithms for image processing and machine learning such as: pixel format conversion, image scaling and filtration, 
    extraction of statistic information from images, motion detection, object detection (HAAR and LBP classifier cascades) and classification, neural network.
    
    The algorithms are optimized with using of different SIMD CPU extensions. 
    In particular the library supports following CPU extensions: SSE, AVX and AVX-512 for x86/x64, VMX(Altivec) and VSX(Power7) for PowerPC, NEON for ARM.
    
    The %Simd Library has C API and also contains useful C++ classes and functions to facilitate access to C API.
    The library supports dynamic and static linking, 32-bit and 64-bit Windows and Linux, MSVS, G++ and Clang compilers, MSVS project and CMake build systems.

    \section s1 Library folder's structure

    The %Simd Library has next folder's structure:
     - `simd/src/Simd/` - contains source codes of the library.
     - `simd/src/Test/` - contains test framework of the library.
     - `simd/src/Use/` - contains the use examples of the library.
     - `simd/prj/vs2015/` - contains project files of Microsoft Visual Studio 2015.
     - `simd/prj/vs2017/` - contains project files of Microsoft Visual Studio 2017.
     - `simd/prj/vs2019/` - contains project files of Microsoft Visual Studio 2019.
     - `simd/prj/cmd/` - contains additional scripts needed for building of the library in Windows.
     - `simd/prj/cmake/` - contains files of CMake build systems.
     - `simd/prj/sh/` - contains additional scripts needed for building of the library in Linux.
     - `simd/prj/txt/` - contains text files needed for building of the library.
     - `simd/data/cascade/` - contains OpenCV cascades (HAAR and LBP).
     - `simd/data/image/` - contains image samples.
     - `simd/data/network/` - contains examples of trained networks.
     - `simd/docs/` - contains documentation of the library.

    \section s2 The library building for Windows

    To build the library and test application for Windows 32/64 you can use Microsoft Visual Studio 2019 (or 2015/2017). 
    These project files are in the directory:
    \n`simd/prj/vs2019/.`
    \n By default the library is built as a DLL (Dynamic Linked Library).
    You also may build it as a static library. 
    To do this you must change appropriate property (Configuration Type) of <b>%Simd</b> project and also define macro `SIMD_STATIC` in file:
    \n`simd/src/Simd/SimdConfig.h.`
	
	Also in order to build the library you can use CMake and MinGW:
	\code
	mkdir build
	cd build
	cmake ..\prj\cmake -DSIMD_TOOLCHAIN="your_toolchain\bin\g++" -DSIMD_TARGET="x86_64" -DCMAKE_BUILD_TYPE="Release" -G "MinGW Makefiles"
	mingw32-make
	\endcode	

    \section s3 The library building for Linux

    To build the library and test application for Linux 32/64 you need to use CMake build systems.
    Files of CMake build systems are placed in the directory:
    `simd/prj/cmake/.`
    The library can be built for x86/x64, PowerPC(64) and ARM(32/64) platforms with using of G++ or Clang compilers.
    With using of native compiler (g++) for current platform it is simple:
    \code
	mkdir build
	cd build
	cmake ../prj/cmake -DSIMD_TOOLCHAIN="" -DSIMD_TARGET=""
    make
    \endcode
    To build the library for PowePC(64) and ARM(32/64) platforms you can also use toolchain for cross compilation.
    There is an example of using for PowerPC (64 bit):
    \code
	mkdir build
	cd build
	cmake ../prj/cmake -DSIMD_TOOLCHAIN="/your_toolchain/usr/bin/powerpc-linux-gnu-g++" -DSIMD_TARGET="ppc64" -DCMAKE_BUILD_TYPE="Release"
    make
    \endcode
    For ARM (32 bit):
    \code
	mkdir build
	cd build
	cmake ../prj/cmake -DSIMD_TOOLCHAIN="/your_toolchain/usr/bin/arm-linux-gnueabihf-g++" -DSIMD_TARGET="arm" -DCMAKE_BUILD_TYPE="Release"
    make
    \endcode
    And for ARM (64 bit):
    \code
	mkdir build
	cd build
	cmake ../prj/cmake -DSIMD_TOOLCHAIN="/your_toolchain/usr/bin/aarch64-linux-gnu-g++" -DSIMD_TARGET="aarch64" -DCMAKE_BUILD_TYPE="Release"
    make
    \endcode
    As result the library and the test application will be built in the current directory.
	
	There are addition build parameters:

     - `SIMD_AVX512` - Enable of AVX-512 (AVX-512F, AVX-512CD, AVX-512VL, AVX-512DQ, AVX-512BW) CPU extensions. It is switched on by default.
     - `SIMD_AVX512VNNI` - Enable of AVX-512-VNNI CPU extensions. It is switched on by default.
     - `SIMD_TEST` - Build test framework. It is switched on by default.
     - `SIMD_INFO` - Print build information. It is switched on by default.
     - `SIMD_PERF` - Enable of internal performance statistic. It is switched off by default.
     - `SIMD_SHARED` - Build as SHARED library. It is switched off by default.
     - `SIMD_GET_VERSION` - Call scipt to get %Simd Library version. It is switched on by default.
     - `SIMD_SYNET` - Enable optimizations for Synet framework. It is switched on by default.
     - `SIMD_SINT8_DEBUG` - Enable debug INT8 capabilities for Synet framework. It is switched on by default.
     - `SIMD_HIDE` - Hide internal functions of %Simd Library. It is switched off by default.
     - `SIMD_TEST_FLAGS` - Addition compiler flags to build test framework.

    \section s4 The library using

    If you use the library from C code you must include:
    \code
    #include "Simd/SimdLib.h"
    \endcode

    And to use the library from C++ code you must include:
    \code
    #include "Simd/SimdLib.hpp"
    \endcode

    In order to use Simd::Detection you must include:
    \code
    #include "Simd/SimdDetection.hpp"
    \endcode
    
    In order to use Simd::Neural framework you must include:
    \code
    #include "Simd/SimdNeural.hpp"
    \endcode
    
    In order to use Simd::Motion framework you must include:
    \code
    #include "Simd/SimdMotion.hpp"
    \endcode

    \section s5 Interaction with OpenCV:

    If you need use mutual conversion between %Simd and OpenCV types you just have to define macro `SIMD_OPENCV_ENABLE` before including of %Simd headers:
    \code
    #include <opencv2/core/core.hpp>
    #define SIMD_OPENCV_ENABLE
    #include "Simd/SimdLib.hpp"
    \endcode
    And you can convert next types:
     - `cv::Point`, `cv::Size` <--> Simd::Point
     - `cv::Rect` <--> Simd::Rectangle
     - `cv::Mat` <--> Simd::View

    \section s6 Test Framework

    The test suite is needed for testing of correctness of work of the library and also for its performance testing.
    There is a set of tests for every function from API of the library. 
    There is an example of test application using:
    \code
    ./Test -m=a -tt=1 -f=Sobel -ot=log.txt
    \endcode
    Where next parameters were used:
     - `-m=a` - a auto checking mode which includes performance testing (only for library built in Release mode). 
    In this case different implementations of each functions will be compared between themselves 
    (for example a scalar implementation and implementations with using of different SIMD instructions such as SSE2, AVX2, and other).
    Also it can be `-m=c` (creation of test data for cross-platform testing), `-m=v` (cross-platform testing with using of early prepared test data)
    and `-m=s` (running of special tests).
     - `-tt=1` - a number of test threads.
     - `-fi=Sobel` - an include filter. In current case will be tested only functions which contain word `Sobel` in their names. 
    If you miss this parameter then full testing will be performed.
    You can use several filters - function name has to satisfy at least one of them.
     - `-ot=log.txt` - a file name with test report (in TEXT file format). The test's report also will be output to console.
    
    Also you can use parameters:
     - `-help` or `-?` in order to print help message.
     - `-r=../..` to set project root directory.
     - `-pa=1` to print alignment statistics.
     - `-pi=1` to print internal statistics (Cmake parameter SIMD_PERF must be ON).
     - `-c=512` a number of channels in test image for performance testing.
     - `-h=1080` a height of test image for performance testing.
     - `-w=1920` a width of test image for performance testing.
     - `-oh=log.html` a file name with test report (in HTML file format).
     - `-s=sample.avi` a video source (Simd::Motion test).
     - `-o=output.avi` an annotated video output (Simd::Motion test).
     - `-wt=1` a thread number used to parallelize algorithms.
     - `-fe=Abs` an exlude filter to exclude some tests.
     - `-mt=100` a minimal test execution time (in milliseconds).
     - `-lc=1` to litter CPU cache between test runs.
     - `-ri=city.jpg` a name of real image used in some tests. The image have to be placed in `./data/image` directory.
*/

/*! @defgroup c_types C Types
    \short Types of %Simd Library C API.
*/

/*! @defgroup cpp_types C++ Types
    \short C++ API Types of %Simd Library.
*/

/*! @ingroup cpp_types
    @defgroup cpp_allocator Allocator
    \short Simd::Allocator structure. 
*/

/*! @ingroup cpp_types
    @defgroup cpp_point Point
    \short Simd::Point structure and related functions. 
*/

/*! @ingroup cpp_point
    @defgroup cpp_point_functions Related Functions 
    \short Related functions for Simd::Point structure. 
*/

/*! @ingroup cpp_types
    @defgroup cpp_rectangle Rectangle
    \short Simd::Rectangle structure and related functions. 
*/

/*! @ingroup cpp_rectangle
    @defgroup cpp_rectangle_functions Related Functions 
    \short Related functions for Simd::Rectangle structure. 
*/

/*! @ingroup cpp_types
    @defgroup cpp_pixels Pixels
    \short BGR, BGRA, HSL, HSV pixel structures.
*/

/*! @ingroup cpp_types
    @defgroup cpp_view View
    \short Simd::View structure and related functions. 
*/

/*! @ingroup cpp_view
    @defgroup cpp_view_functions Related Functions 
    \short Related functions for Simd::View structure. 
*/

/*! @ingroup cpp_types
    @defgroup cpp_frame Frame
    \short Simd::Frame structure and related functions.
*/

/*! @ingroup cpp_frame
    @defgroup cpp_frame_functions Related Functions
    \short Related functions for Simd::Frame structure.
*/

/*! @ingroup cpp_types
    @defgroup cpp_pyramid Pyramid
    \short Simd::Pyramid structure and related functions.
*/

/*! @ingroup cpp_pyramid
    @defgroup cpp_pyramid_functions Related Functions
    \short Related functions for Simd::Pyramid structure.
*/

/*! @ingroup cpp_types
    @defgroup cpp_detection Detection
    \short Simd::Detection structure (C++ Object Detection Wrapper).
*/

/*! @ingroup cpp_types
    @defgroup cpp_neural Neural
    \short Simd::Neural is C++ framework for running and learning of Convolutional Neural Network.
*/

/*! @ingroup cpp_types
    @defgroup cpp_motion Motion
    \short Simd::Motion is C++ framework for motion detection.
*/

/*! @ingroup cpp_types
    @defgroup cpp_contour Contour Detector
    \short Simd::ContourDetector structure and related functions.
*/

/*! @ingroup cpp_types
    @defgroup cpp_shift Shift Detector
    \short Simd::ShiftDetector structure and related functions.
*/

/*! @ingroup cpp_types
    @defgroup cpp_image_matcher Image Matcher
    \short Simd::ImageMatcher structure and related functions.
*/

/*! @ingroup cpp_types
    @defgroup cpp_drawing Drawing Functions
    \short Drawing functions to annotate debug information.
*/

/*! @defgroup functions Functions
    \short Functions of %Simd Library API.
*/

/*! @ingroup functions
    @defgroup info Info
    \short Functions with information about library.
*/

/*! @ingroup functions
    @defgroup memory Memory Utilities
    \short Functions for memory management.
*/

/*! @ingroup functions
    @defgroup thread Thread Utilities
    \short Functions for thread management.
*/

/*! @ingroup functions
    @defgroup cpu_flags CPU Flags
    \short Functions for CPU flags management.
*/

/*! @ingroup functions
    @defgroup hash Hash Functions
    \short Functions for hash estimation.
*/

/*! @ingroup functions
    @defgroup reordering Byte Reordering
    \short Functions for bytes reordering.
*/

/*! @ingroup functions
    @defgroup conversion Conversion
    \short Functions for image format conversions.
*/

/*! @ingroup conversion
    @defgroup universal_conversion Universal
    \short Universal functions for image format conversions.
*/

/*! @ingroup conversion
    @defgroup bayer_conversion Bayer 
    \short Functions for Bayer image conversions.
*/

/*! @ingroup conversion
    @defgroup bgr_conversion BGR-24 
    \short Functions for BGR-24 image conversions.
*/

/*! @ingroup conversion
    @defgroup bgra_conversion BGRA-32 
    \short Functions for BGRA-32 image conversions.
*/

/*! @ingroup conversion
    @defgroup gray_conversion Gray-8 
    \short Functions for Gray-8 image conversions.
*/

/*! @ingroup conversion
    @defgroup rgb_conversion RGB-24 
    \short Functions for RGB-24 image conversions.
*/

/*! @ingroup conversion
    @defgroup rgba_conversion RGBA-32 
    \short Functions for RGBA-32 image conversions.
*/

/*! @ingroup conversion
    @defgroup yuv_conversion YUV 
    \short Functions for YUV image conversions.
*/

/*! @ingroup conversion
    @defgroup interleave_conversion Interleave
    \short Functions to intereleave planar images.
*/

/*! @ingroup conversion
    @defgroup deinterleave_conversion Deinterleave
    \short Functions to deinterleave images.
*/

/*! @ingroup conversion
    @defgroup uyvy_conversion UYVY 
    \short Functions for UYVY image conversions.
*/

/*! @ingroup conversion
    @defgroup other_conversion Other 
    \short Functions for other image format conversions.
*/

/*! @ingroup functions
    @defgroup drawing Drawing
    \short Functions for image drawing.
*/

/*! @ingroup functions
    @defgroup correlation Correlation
    \short Functions for estimation of correlation.
*/

/*! @ingroup functions
    @defgroup histogram Histogram
    \short Functions for estimation of image histogram.
*/

/*! @ingroup functions
    @defgroup integral Integral
    \short Functions for estimation of integral image.
*/

/*! @ingroup functions
    @defgroup operation Operations
    \short Various mathematical operations with images.
*/

/*! @ingroup functions
    @defgroup filter Filters
    \short Various image filters.
*/

/*! @ingroup filter
    @defgroup gaussian_filter Gaussian Blur Filters
    \short Gaussian blur image filters.
*/

/*! @ingroup filter
    @defgroup laplace_filter Laplace Filters
    \short Laplace image filters.
*/

/*! @ingroup filter
    @defgroup median_filter Median Filters
    \short Median image filters.
*/

/*! @ingroup filter
    @defgroup sobel_filter Sobel Filters
    \short Sobel image filters.
*/

/*! @ingroup filter
    @defgroup other_filter Other Filters
    \short Other image filters.
*/

/*! @ingroup functions
    @defgroup resizing Resizing
    \short Functions for image resizing.
*/

/*! @ingroup functions
    @defgroup shifting Shifting
    \short Functions for image shifting.
*/

/*! @ingroup functions
    @defgroup copying Copying
    \short Functions for image copying.
*/

/*! @ingroup functions
    @defgroup filling Filling
    \short Functions for image filling.
*/

/*! @ingroup functions
    @defgroup binarization Binarization
    \short Functions for image binarization.
*/

/*! @ingroup functions
    @defgroup statistic Statistic
    \short Functions for image statistic estimation.
*/

/*! @ingroup statistic
    @defgroup conditional Conditional
    \short Functions for conditional estimation of image statistic.
*/

/*! @ingroup statistic
    @defgroup col_statistic Columns Statistic
    \short Estimation of image statistic for separate columns.
*/

/*! @ingroup statistic
    @defgroup row_statistic Rows Statistic
    \short Estimation of image statistic for separate rows.
*/

/*! @ingroup statistic
    @defgroup sobel_statistic Sobel Statistic
    \short Getting of statistic related with Sobel filters.
*/

/*! @ingroup statistic
    @defgroup other_statistic Other Statistic
    \short Estimation of various image statistic.
*/

/*! @ingroup functions
    @defgroup transform Image Transformation
    \short Functions for image transformation (transposition, rotation).
*/

/*! @ingroup functions
    @defgroup motion_detection Motion Detection
    \short Functions for motion detection.
*/

/*! @ingroup motion_detection
    @defgroup texture_estimation Texture Estimation
    \short Functions for estimation of background texture.
*/

/*! @ingroup motion_detection
    @defgroup difference_estimation Difference Estimation
    \short Functions for estimation of difference between current frame and background.
*/

/*! @ingroup motion_detection
    @defgroup segmentation Segmentation
    \short Functions for image segmentation.
*/

/*! @ingroup motion_detection
    @defgroup interference Interference Detection
    \short Functions for detection of interference in motion detection algorithm.
*/

/*! @ingroup motion_detection
    @defgroup background Background Updating
    \short Functions for background updating.
*/

/*! @ingroup motion_detection
    @defgroup edge_background Edge Background Updating
    \short Functions for edge background updating.
*/

/*! @ingroup functions
    @defgroup hog HOG (Histogram of Oriented Gradients)
    \short Functions for extraction and processing of HOG features.
*/

/*! @ingroup functions
    @defgroup svm SVM
    \short Support Vector Machine's functions.
*/

/*! @ingroup functions
    @defgroup neural Neural Network
    \short Artificial Neural Network's functions for accelerating of Simd::Neural.
*/

/*! @ingroup functions
    @defgroup object_detection Object Detection
    \short Object Detection's low-level API for Simd::Detection.
*/

/*! @ingroup functions
    @defgroup contour Contour Extraction
    \short Contour extraction functions for accelerating of Simd::ContourDetector.
*/

/*! @ingroup functions
    @defgroup float16 Half-Precision (16-bit) Float Point Numbers
    \short Functions for conversion between 16-bit and 32-bit float numbers and other.
*/

/*! @ingroup functions
    @defgroup synet Synet Framework
    \short Functions for accelerating of inference of neural network in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_activation Activation functions
    \short Functions to acceleratе activation functions in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_conversion Conversion functions
    \short Functions to acceleratе conversion in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_convolution_fp32 FP32 convolution framework
    \short A framework to accelerate FP32 convolution in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_convolution_int8 INT8 convolution framework
    \short A framework to accelerate INT8 convolution in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_deconvolution_fp32 FP32 deconvolution framework
    \short A framework to accelerate FP32 deconvolution in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_merged_convolution_fp32 FP32 merged convolution frameworks
    \short A framework to accelerate FP32 merged convolution in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_merged_convolution_int8 INT8 merged convolution frameworks
    \short A framework to accelerate INT8 merged convolution in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_fused FusedLayer functions
    \short Functions to acceleratе FusedLayer in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_inner_product InnerProductLayer functions
    \short Functions to acceleratе InnerProductLayer in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_scale Scale functions
    \short Functions to acceleratе layer scale in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup synet
    @defgroup synet_winograd Winograd functions
    \short Functions to acceleratе Winograd convolution algorithm in <a href="http://github.com/ermig1979/Synet">Synet Framework</a>.
*/

/*! @ingroup functions
    @defgroup matrix Matrix Operations
    \short Matrix operations.
*/

/*! @ingroup functions
    @defgroup image_io Image IO
    \short Image IO (Save/Load) operations.
*/

/*! @ingroup functions
    @defgroup base64 Base64 Conversion
    \short Functions for encoding/decoding of strings in Base64 format.
*/